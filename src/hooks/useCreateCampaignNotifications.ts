
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export function useCreateCampaignNotifications() {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const createNotificationsMutation = useMutation({
    mutationFn: async () => {
      console.log('üîÑ Creando notificaciones de campa√±a para todos los clientes...');

      // 1. Obtener todos los clientes activos
      const { data: customers, error: customersError } = await supabase
        .from('customers')
        .select('id, name, phone, whatsapp_number')
        .order('name');

      if (customersError) {
        console.error('‚ùå Error obteniendo clientes:', customersError);
        throw customersError;
      }

      if (!customers || customers.length === 0) {
        throw new Error('No hay clientes en el sistema para procesar');
      }

      console.log(`üë• Encontrados ${customers.length} clientes`);

      let createdCount = 0;
      let skippedCount = 0;

      // 2. Para cada cliente, crear una notificaci√≥n de campa√±a pendiente
      for (const customer of customers) {
        const phoneNumber = customer.whatsapp_number || customer.phone;
        
        if (!phoneNumber || phoneNumber.trim() === '') {
          console.log(`‚ö†Ô∏è Saltando cliente ${customer.name} - sin n√∫mero de tel√©fono`);
          skippedCount++;
          continue;
        }

        // Verificar si ya existe una notificaci√≥n pendiente o preparada para este cliente
        const { data: existingNotification } = await supabase
          .from('trip_notification_log')
          .select('id')
          .eq('customer_id', customer.id)
          .eq('template_name', 'proximos_viajes')
          .in('status', ['pending', 'prepared'])
          .single();

        if (existingNotification) {
          console.log(`‚ö†Ô∏è Cliente ${customer.name} ya tiene una notificaci√≥n de campa√±a`);
          skippedCount++;
          continue;
        }

        // Crear notificaci√≥n de campa√±a pendiente
        const { error: insertError } = await supabase
          .from('trip_notification_log')
          .insert({
            customer_id: customer.id,
            customer_name: customer.name,
            customer_phone: phoneNumber,
            template_name: 'proximos_viajes',
            template_language: 'es_CO',
            personalized_message: `¬°Hola ${customer.name}! üëã

üõ´ **IMPORTANTE: Pr√≥ximo viaje programado**

Te informamos que tenemos un viaje programado pr√≥ximamente:

üìÖ **Salida desde Barranquilla:** {{fecha_salida_baq}}
üìÖ **Retorno desde Curazao:** {{fecha_retorno_cur}}

‚è∞ **FECHA L√çMITE para entrega de encomiendas:**
üóìÔ∏è **{{fecha_limite_entrega}} antes de las 3:00 PM**

üì¶ Si tienes alguna encomienda para enviar, por favor aseg√∫rate de entregarla antes de la fecha l√≠mite.

üìû Para coordinar la entrega o resolver dudas, cont√°ctanos.

‚úàÔ∏è **Env√≠os Ojito** - Conectando Barranquilla y Curazao`,
            status: 'pending'
          });

        if (insertError) {
          console.error(`‚ùå Error creando notificaci√≥n para ${customer.name}:`, insertError);
          skippedCount++;
          continue;
        }

        createdCount++;
        console.log(`‚úÖ Notificaci√≥n de campa√±a creada para: ${customer.name}`);
      }

      console.log(`‚úÖ Proceso completado: ${createdCount} creadas, ${skippedCount} saltadas`);

      return {
        created: createdCount,
        skipped: skippedCount,
        total: customers.length
      };
    },
    onSuccess: (data) => {
      console.log('‚úÖ Notificaciones de campa√±a creadas exitosamente:', data);
      
      queryClient.invalidateQueries({ queryKey: ['campaign-notifications'] });
      
      toast({
        title: "Notificaciones de Campa√±a Creadas",
        description: `${data.created} notificaciones creadas para campa√±a de pr√≥ximos viajes. ${data.skipped > 0 ? `${data.skipped} clientes saltados.` : ''}`,
      });
    },
    onError: (error: any) => {
      console.error('‚ùå Error creando notificaciones de campa√±a:', error);
      toast({
        title: "Error",
        description: error.message || "No se pudieron crear las notificaciones de campa√±a",
        variant: "destructive"
      });
    }
  });

  return {
    createNotifications: createNotificationsMutation.mutate,
    isCreating: createNotificationsMutation.isPending,
  };
}
